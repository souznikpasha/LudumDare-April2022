//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controlls"",
    ""maps"": [
        {
            ""name"": ""Human"",
            ""id"": ""f1437762-16dd-48fe-a002-7c59584f817c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b331c235-5bf5-4ce2-beb1-0ce0471c6ed9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3662c1b2-53f0-4f23-a251-393044c4d169"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roar"",
                    ""type"": ""Button"",
                    ""id"": ""15e4197f-06d8-4430-9f89-76d9fa3a3d93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d2fc14f7-bd58-46f9-9407-8f8f275bebb5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""79a27305-f915-4cf9-97b2-bc33b4604ca3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""abbcb337-c658-4fd7-a4e1-e8a90144b53a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d51c98ee-47ab-422b-8d31-32b5651ba63e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66a3c39d-8afc-4670-999b-bcbabb724339"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Werewolf"",
            ""id"": ""3992b079-c541-476d-abf7-54e6ada1c079"",
            ""actions"": [
                {
                    ""name"": ""Eat"",
                    ""type"": ""Button"",
                    ""id"": ""9984896a-8fc8-41e2-858f-6b54e3e987db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a498714-229e-4fb7-b9c2-4c491fc76c5d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": []
        }
    ]
}");
        // Human
        m_Human = asset.FindActionMap("Human", throwIfNotFound: true);
        m_Human_Move = m_Human.FindAction("Move", throwIfNotFound: true);
        m_Human_Jump = m_Human.FindAction("Jump", throwIfNotFound: true);
        m_Human_Roar = m_Human.FindAction("Roar", throwIfNotFound: true);
        // Werewolf
        m_Werewolf = asset.FindActionMap("Werewolf", throwIfNotFound: true);
        m_Werewolf_Eat = m_Werewolf.FindAction("Eat", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Human
    private readonly InputActionMap m_Human;
    private IHumanActions m_HumanActionsCallbackInterface;
    private readonly InputAction m_Human_Move;
    private readonly InputAction m_Human_Jump;
    private readonly InputAction m_Human_Roar;
    public struct HumanActions
    {
        private @Controlls m_Wrapper;
        public HumanActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Human_Move;
        public InputAction @Jump => m_Wrapper.m_Human_Jump;
        public InputAction @Roar => m_Wrapper.m_Human_Roar;
        public InputActionMap Get() { return m_Wrapper.m_Human; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HumanActions set) { return set.Get(); }
        public void SetCallbacks(IHumanActions instance)
        {
            if (m_Wrapper.m_HumanActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_HumanActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_HumanActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_HumanActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_HumanActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_HumanActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_HumanActionsCallbackInterface.OnJump;
                @Roar.started -= m_Wrapper.m_HumanActionsCallbackInterface.OnRoar;
                @Roar.performed -= m_Wrapper.m_HumanActionsCallbackInterface.OnRoar;
                @Roar.canceled -= m_Wrapper.m_HumanActionsCallbackInterface.OnRoar;
            }
            m_Wrapper.m_HumanActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Roar.started += instance.OnRoar;
                @Roar.performed += instance.OnRoar;
                @Roar.canceled += instance.OnRoar;
            }
        }
    }
    public HumanActions @Human => new HumanActions(this);

    // Werewolf
    private readonly InputActionMap m_Werewolf;
    private IWerewolfActions m_WerewolfActionsCallbackInterface;
    private readonly InputAction m_Werewolf_Eat;
    public struct WerewolfActions
    {
        private @Controlls m_Wrapper;
        public WerewolfActions(@Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Eat => m_Wrapper.m_Werewolf_Eat;
        public InputActionMap Get() { return m_Wrapper.m_Werewolf; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WerewolfActions set) { return set.Get(); }
        public void SetCallbacks(IWerewolfActions instance)
        {
            if (m_Wrapper.m_WerewolfActionsCallbackInterface != null)
            {
                @Eat.started -= m_Wrapper.m_WerewolfActionsCallbackInterface.OnEat;
                @Eat.performed -= m_Wrapper.m_WerewolfActionsCallbackInterface.OnEat;
                @Eat.canceled -= m_Wrapper.m_WerewolfActionsCallbackInterface.OnEat;
            }
            m_Wrapper.m_WerewolfActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Eat.started += instance.OnEat;
                @Eat.performed += instance.OnEat;
                @Eat.canceled += instance.OnEat;
            }
        }
    }
    public WerewolfActions @Werewolf => new WerewolfActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IHumanActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoar(InputAction.CallbackContext context);
    }
    public interface IWerewolfActions
    {
        void OnEat(InputAction.CallbackContext context);
    }
}
